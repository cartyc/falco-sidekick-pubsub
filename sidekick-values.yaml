# Default values for falcosidekick.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: falcosecurity/falcosidekick
  tag: 2.21.0
  pullPolicy: IfNotPresent

podSecurityContext:
  runAsUser: 1234
  fsGroup: 1234

# One or more secrets to be used when pulling images
imagePullSecrets: []
# - registrySecretName

nameOverride: ""
fullnameOverride: ""

podSecurityPolicy:
  create: false

priorityClassName: ""

podAnnotations: {}

config:
  existingSecret: ""
  extraEnv: []
  debug: true
  ##
  ## a list of escaped comma separated custom fields to add to falco events, syntax is "key:value\,key:value"
  customfields: ""
  checkcert: true

  slack:
    webhookurl: ""
    footer: ""
    icon: ""
    username: ""
    outputformat: "all"
    minimumpriority: ""
    messageformat: ""

  rocketchat:
    webhookurl: ""
    icon: ""
    username: ""
    outputformat: "all"
    minimumpriority: ""
    messageformat: ""

  mattermost:
    webhookurl: ""
    footer: ""
    icon: ""
    username: ""
    outputformat: "all"
    minimumpriority: ""
    messageformat: ""

  teams:
    webhookurl: ""
    activityimage: ""
    outputformat: "all"
    minimumpriority: ""

  datadog:
    apikey: ""
    minimumpriority: ""
    host: ""

  alertmanager:
    hostport: ""
    minimumpriority: ""

  elasticsearch:
    hostport: ""
    index: "falco"
    type: "event"
    minimumpriority: ""

  influxdb:
    hostport: ""
    database: "falco"
    user: ""
    password: ""
    minimumpriority: ""

  loki:
    hostport: ""
    minimumpriority: ""

  nats:
    hostport: ""
    minimumpriority: ""

  stan:
    hostport: ""
    clusterid: ""
    clientid: ""
    minimumpriority: ""

  aws:
    accesskeyid: ""
    secretaccesskey: ""
    region: ""
    cloudwatchlogs:
      loggroup: ""
      logstream: ""
      minimumpriority: ""
    lambda:
      functionname: ""
      minimumpriority: ""
    sns:
      topicarn: ""
      rawjson: false
      minimumpriority: ""
    sqs:
      url: ""
      minimumpriority: ""

  smtp:
    hostport: ""
    user: ""
    password: ""
    from: ""
    to: ""
    outputformat: "html"
    minimumpriority: ""

  opsgenie:
    apikey: ""
    region: ""
    minimumpriority: ""

  statsd:
    forwarder: ""
    namespace: "falcosidekick."

  dogstatsd:
    forwarder: ""
    namespace: "falcosidekick."
    tags: ""

  webhook:
    address: ""
    customHeaders: ""  # a list of comma separated custom headers to add, syntax is "key:value,key:value"
    minimumpriority: ""

  azure:
    subscriptionID: ""
    resourceGroupName: ""
    podIdentityClientID: ""
    podIdentityName: ""
    eventHub:
      namespace: ""
      name: ""
      minimumpriority: ""

  discord:
    webhookurl: ""
    icon: ""
    minimumpriority: ""

  gcp:
    credentials: "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAia3ViZXJuZXRlcy1jb25maWdzIiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiNDlmMzlmMzE3Y2IxMDIzOTU5NmM2Y2EyOTJhOGM0NmJkMDA2NjMzYyIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFETDNmOEhMRXlITUhOaVxuM3B5b24vRG0rRUEvOU5kYmRWbVBBVFkrTm5mMWdXbGRsNTRySDk0MGEvQWZ2SVNCcm91aDJDSzh1VE04YnhEMFxuanNJb01jRGFVUUIvOUh0em5PRmxqWVk3SjBRd05aRWdOOHR0WXhNZytJVUpheXBJRzlXYm9tb0dGa1gvVE4rV1xuSkUyUTBlbFE5aUxXbEwrY3RqdXQ1UElqMS9QMTBMWmpVbmNpYmNqUnRxQ0F4UWg1czdTMWlCMHVOMksxZ2k5K1xuOUpuTzlma3FadUZKMytKSlhJQXBYL1ZpZWdyZzhBbkJ5ZHRoTEJKSTZwYm1FK1BCT1JKdzRsNng5S0RMaXhtOVxuQjh6TGMxcXVFWmpkTXBTUzRnaW9TclE3c3hDTG0ra2Nkc2w3L251bXBXVDM4VDg3aVd0V3E0YXBtT1pSdUFQU1xuZC9RSU5uM1pBZ01CQUFFQ2dnRUFCTEI5RXNtcWt2dUMwL1hoN2FFTU5ndmswblBMMWw4N0thWngvSGxkUmdqdFxuaHdrYlNzdW5YVlpVUmk2Y2I2MDNxZ2ZpT0t3YjZScDI3ZUV3eHlMcDJEdS93ckc1ZXozVEUzWnZiWUhvT0NHclxuVG0zcUlJQ0VhcUE4MHl3alkxZzhrQ0ZxeGV3U1BSNmtEL3lTeWkrQjZlcFhmODhaSHo0ejNqcWpkVDZjN24wTlxuaHNLaFBYbzhhZ1laV0g5VzhTNzRSSEdMdWtDejZzN2g3QTdrZlpndHowUHI2RFphSkg1ZmU5NWxvb00wanU3YVxucC9lekl6Y0Y0WldlVFZkZzNWalRUWU5oQ2VYOU8xUUZhdGpuTGhER1pqeVlhNTR0YXB5UjVnYjVPQVZhNmt6MVxub0NUOGRpV0RLaS9MM01SRWtHMWhhbUxMNHRqQXBqRmVEODZyWHFuS3dRS0JnUUR3cnNRZFY3dVZhRzVqbVBKYVxuUzdISHJhV3BDcnRTVG1sKzdpSnUrVVZDSURRMzNqQXR1amdWTFFwSDN2bjJyVWgxVVVFeXd0bVhLRHRnRmlUdVxuM2diM24rNFFqdkJLVzZmK2VDS1hDcmVST0sxOTNZZzdTZVZRZ253WGZGZ2hGcVppem4zR0hVRkY5c0FVREU2blxuOExLc2JCWlZVdHc3c056c0JqMk4xdER5MFFLQmdRRFkxMjFTTjNmakN4MjRoREdJcFdkOE02VHpYYjV2RXZ4Z1xuUUlkYXVibjhnVE5samtqOWhhRTgxdE5CM1Z4bnVvRXZtU1VLOVJKYnh6RE4zeSswLzNBbHkvK3NsOWpCNExBZVxubWxnV1FjMTBOVWtwcHRXUHYxb3p3aVZZNkFPVE9DK0hwVDF1Z0o5RTJob2UrNzdrODJSbWV5VjkwVHlmOEdtY1xua01DeDRBYk1pUUtCZ1FDSmsvejZvT25UVCt5NTlmV2k4OTNkdkQ4VHo5U2dDYjU0RmZ1TTMrUmRGamVETC9qdVxuU3FKQVNJeTE1Sm1TRGg5N0lFVmFsTkw0ZXNEbC9nS0NvRnZ2TkhaSzlNb2FWeVpDYWIyc0JTNUZUdGF0T2ZMalxub1N2NXgzelRsL3B3ZjVnQXB2UnlTTXJGQ1hWbWdGcDkyVExwS0tmamdnZnQvdjFwMVc5ZUlzc3g0UUtCZ0hUV1xuOTNmeW5XM0FRcDUyMUgzdHFpbzVaYXNnbXdrY3NOSm9Vc2FuQnJreElQR2F6bWVVeG9HU3U3aGt2M0xCQXZVVFxuenVydGpKdlpZOG02ZGVsUUxpeWZsRDk2Zm5oUlNuVGk4NDNpblFMOTUxTkRLeFhPcEpyNUJNaTRFNTBUREVGSlxuM3lVWXR6a1JVRHZicUV1VGZramVHQ0NJU3VOZlZuamZZb1UxMGxRSkFvR0JBTEVSekRHc0ZDb3AyMnJjUU9GNlxuU2VsU05BQ24rNk9tQm05THFPOHNKMllNenhaYTRDcWoyUWR3OE91dEtEYjY4NSt5MnNjY01qZHEzYVRRbHMrNlxuQWlNd2U1bnVIRmoxV3MxZlJ0eU40VlRUcEpEY1cyeklya0t6UDk1RE9HR082SUZ6UEltSVk3MWVPWDlhUlJmSlxuYmFiSExTaGxPSGZPd2E4cFFjdVNOWDBvXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAic2lkZWtpY2tAa3ViZXJuZXRlcy1jb25maWdzLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAiY2xpZW50X2lkIjogIjEwNDg4MTkxMTY4MDcyMjI0OTM2NSIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvc2lkZWtpY2slNDBrdWJlcm5ldGVzLWNvbmZpZ3MuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iCn0K"  # The base64-encoded JSON key file for the GCP service account
    pubsub:
      projectid: "kubernetes-configs"  # The GCP Project ID containing the Pub/Sub Topic
      topic: "falco-sidekick"  # The name of the Pub/Sub topic
      minimumpriority: ""

  googlechat:
    webhookurl: ""
    outputformat: "all"
    minimumpriority: ""
    messageformat: ""

  kafka:
    hostport: ""
    topic: ""
    partition: "0"
    messageformat: ""
    minimumpriority: ""

  pagerduty:
    apikey: ""
    service: ""
    assignee: ""
    escalationpolicy: ""
    minimumpriority: ""

  kubeless:
    function: ""
    namespace: ""
    port: 8080
    minimumpriority: ""

  cloudevents:
    address: ""
    extension: ""
    minimumpriority: ""

service:
  type: ClusterIP
  port: 2801

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: falcosidekick.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

webui:
  enabled: false

  image:
    repository: falcosecurity/falcosidekick-ui
    tag: "v0.2.0"
    pullPolicy: IfNotPresent

  podSecurityContext:
    runAsUser: 1234
    fsGroup: 1234

  retention: 50

  # One or more secrets to be used when pulling images
  imagePullSecrets: []
  # - registrySecretName

  podSecurityPolicy:
    create: true

  priorityClassName: ""

  podAnnotations: {}

  service:
    # type: NodePort
    type: ClusterIP
    port: 2802
    nodePort: 30282

  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: falcosidekick-ui.local
        paths: ["/ui", "/events", "/healthz", "/ws"]

    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}